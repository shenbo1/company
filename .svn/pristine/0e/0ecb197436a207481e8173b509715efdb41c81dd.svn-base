using Company.Admin.Fliter;
using Company.DAL.Data;
using Company.Dto;
using Company.Dto.Model;
using Company.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Company.Util;
using System.Reflection;
using Company.BLL.Data;

using Company.Dto.Data;

using System.IO;
using Company.DAL;

namespace Company.Admin.Controllers
{
    [AdminLoginFilter]
    public class AdminController : Controller
    {
        #region 首页
        public ActionResult Index()
        {
            var user = CookieOperate.MemberCookie;

            ViewBag.Name = user.Name;
            ViewBag.ID = user.Id;
            ViewBag.Img = string.IsNullOrEmpty(user.WeChatHeadUrl) ? "/content/img/profile_small.jpg" : user.WeChatHeadUrl;
            return View();
        }
        public ActionResult Login() 
        {
            CookieOperate.MemberCookie = null;
            return View();
        }
        public ActionResult AdminCenter() {
            var model = CookieOperate.MemberCookie;
            model = CompanyUserDBOperate.GetModelById(model.Id);
            var dep = CompanyDepartMentDBOperate.GetChildOne(model.DepartId, model.CompanyId);
            model.WeChatHeadUrl = string.IsNullOrEmpty(model.WeChatHeadUrl) ? "/content/img/profile_small.jpg" : model.WeChatHeadUrl;
            if (dep != null)
                model.DepartName = dep.Name;
            return View(model);
        }
        public ActionResult Welcome()
        {
            return View();
        }
        public JsonResult AdminLogin(string LoginId, string Password)
        {
            ResultInfo info = new ResultInfo() { Message = "用户名或者密码错误" };
            var model = CompanyUserDBOperate.Login(LoginId, CommonMethod.PasswordMD5( Password));
            if (model != null)
            {
                if (model.IsDeleted == 1) {
                    info.Message = "您的账号已被禁用,请联系管理员";
                    return Json(info);
                }
                var company = CompanyInfoDBOperate.GetModelById(model.CompanyId);
                if (company != null) {
                    model.CompanyName = company.CompanyName;
                }
                info.IsSuccess = true;
                CookieOperate.MemberCookie = model;
            }
            return Json(info);
        }
        public ActionResult MenuList()
        {
            string html = "";
            var menuList = UserMenuDBOperate.GetRoleMenuList(CookieOperate.MemberCookie.DepartId);
            var menuParent = menuList.Where(a => a.PID == 0).ToList();
            html = MenuListHtml(menuList, menuParent);
            return Content("document.write('" + html + "')");
        }

        public ActionResult NoPerMission() 
        {
            return View();
        }

        #region 菜单
        /// <summary>
        /// 菜单
        /// </summary>
        /// <param name="list">总菜单</param>
        /// <param name="ParentList">父级菜单</param>
        /// <returns></returns>
        public string MenuListHtml(List<UserMenu> list, List<UserMenu> ParentList)
        {
            string html = "";
            int i = 0;
            foreach (var item in ParentList)
            {
                html += "<li class=\"" + (i == 0 ? "active" : "") + "\">";
                html += "<a href=\"#\">";
                html += "<i class=\"fa " + item.MenuIcon + "\"></i>";
                html += "<span class=\"nav-label\">" + item.Name + "</span>";
                html += "<span class=\"fa arrow\"></span>";
                html += "</a>";
                var childList = list.Where(a => a.PID == item.Id).ToList();
                html += MenuChlid(childList);
                html += "</li>";
                i++;
            }
            return html;
        }
        /// <summary>
        /// 获取子菜单
        /// </summary>
        /// <param name="list">子菜单</param>
        /// <returns></returns>
        public string MenuChlid(List<UserMenu> list)
        {
            if (list == null || list.Count() == 0) { return ""; }
            string html = "";
            html += "<ul class=\"nav nav-second-level\">";
            foreach (var item in list)
            {
                html += "<li>";
                html += "<a class=\"J_menuItem\" href=\"" + item.Url + "\" data-index=\"0\">" + item.Name + "<span class=\"fa arrow\"></span></a>";
                html += "</li>";
            }
            html += "</ul>";
            return html;
        }
        #endregion

        #endregion

        #region 公司管理
        public ActionResult CompanyInfo()
        {
            return View();
        }
        public JsonResult CompanyInfoList()
        {
            int pagesize = CommonMethod.GetInt(Request["limit"]);
            int offset = CommonMethod.GetInt(Request["offset"]);
            string name = CommonMethod.GetString(Request["name"]);
            var totalcount = 0;
            var list = CompanyInfoDBOperate.GetPagerList(pagesize, offset, name, out totalcount);
            PagerList<CompanyInfo> pagerList = new PagerList<CompanyInfo>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        public JsonResult CompanyInfoAdd(CompanyInfo model) 
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                flag = CompanyInfoDBOperate.AddCompanyInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = CompanyInfoDBOperate.ModifyCompanyInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult CompanyInfoGetOne(int id) {
            ResultInfo<CompanyInfo> result = new ResultInfo<CompanyInfo>();
            result.Data = CompanyInfoDBOperate.GetModelById(id);
            return Json(result);
        }
        #endregion
              
        #region 角色管理
        public ActionResult RoleInfo()
        {
            return View();
        }
        public JsonResult RoleInfoList()
        {
            int pagesize = CommonMethod.GetInt(Request["limit"]);
            int offset = CommonMethod.GetInt(Request["offset"]);
            string name = CommonMethod.GetString(Request["name"]);
            var totalcount = 0;
            var list = RoleInfoDBOperate.GetPagerList(pagesize, offset, name, out totalcount);
            PagerList<RoleInfo> pagerList = new PagerList<RoleInfo>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        public JsonResult RoleInfoAdd(RoleInfo model)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                flag = RoleInfoDBOperate.AddRoleInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = RoleInfoDBOperate.ModifyRoleInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult RoleInfoGetOne(int id)
        {
            ResultInfo<RoleInfo> result = new ResultInfo<RoleInfo>();
            result.Data = RoleInfoDBOperate.GetModelById(id);
            return Json(result);
        }
        #endregion

        #region 菜单管理
        public ActionResult UserMenuIndex()
        {
            return View();
        }
        #region 菜单
        public JsonResult UserMenuAdd(UserMenu model)
        {
            ResultInfo result = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                flag = UserMenuDBOperate.AddUserMenu(model);
                if (flag) { result.IsSuccess = true; result.Message = "菜单添加成功"; }
            }
            else
            {
                flag = UserMenuDBOperate.UpdateUserMenu(model);
                if (flag) { result.IsSuccess = true; result.Message = "菜单修改成功"; }
            }

            return Json(result);
        }

        public JsonResult UserMenuGetOne(int id)
        {
            ResultInfo<UserMenu> result = new ResultInfo<UserMenu>();
            var model = UserMenuDBOperate.GetModelById(id);
            if (model != null)
            {
                result.IsSuccess = true;
                result.Data = model;
            }
            return Json(result);
        }

        public JsonResult UserManagerList()
        {
            var AllList = UserMenuDBOperate.GetAllList();
            var pList = AllList.Where(a => a.PID == 0).ToList();

            foreach (var item in pList)
            {
                var chlidList = AllList.Where(a => a.PID == item.Id).ToList();
                item.ChildList = chlidList;
            }

            return Json(pList);
        }

        public JsonResult UserRoleTreeList()
        {
            var AllList = UserMenuDBOperate.GetAllList();
            var ConventList = AllList.ConvertAll(a => new ZTreeModel()
            {
                id = a.Id,
                name = a.Name,
                pId = a.PID ?? 0,
            });
            return Json(ConventList);
        }

        #region 根据角色获取菜单权限
        public JsonResult UserGetPermissionByRole()
        {
            int roleId = CommonMethod.GetInt(Request["RoleId"]);
            var MenuList = UserMenuDBOperate.GetRoleMenuList(roleId);
            ResultInfo<List<int>> result = new ResultInfo<List<int>>();
            result.IsSuccess = true;
            result.Data = MenuList.ConvertAll(a => a.Id).ToList();
            return Json(result);
        }
        #endregion

        #region 根据角色分配菜单权限
        public JsonResult UserPermissionSet()
        {
            int roleId = CommonMethod.GetInt(Request["RoleId"]);
            string PermissionIds = CommonMethod.GetString(Request["PermissionIds"]);
            bool flag = UserMenuDBOperate.SetRoleMenuList(roleId, PermissionIds);
            ResultInfo result = new ResultInfo();
            if (flag) { result.IsSuccess = true; result.Message = "设置成功"; }
            return Json(result);
        }
        #endregion
        #endregion
        #endregion

        #region 人员管理
        public ActionResult AdminInfo()
        {
            int companyId = CookieOperate.MemberCookie.CompanyId;

            ViewBag.CompanyList = CompanyInfoDBOperate.GetList(companyId).Select(a => new SelectListItem()
            {
                Value = a.Id.ToString(),
                Text = a.CompanyName+"--"+ a.CompanyFullName
            });

            ViewBag.RoleList = RoleInfoDBOperate.GetList(companyId).Select(p => new SelectListItem()
            {
                Value = p.Id.ToString(),
                Text = p.RoleName
            });
            return View();
        }
        public JsonResult AdminInfoList()
        {
            int pagesize = CommonMethod.GetInt(Request["limit"]);
            int offset = CommonMethod.GetInt(Request["offset"]);
            string name = CommonMethod.GetString(Request["name"]);
            int companyId = CookieOperate.MemberCookie.CompanyId;
            var totalcount = 0;
            var list = AdminInfoDBOperate.GetPagerList(pagesize, offset, name, out totalcount, companyId);
            PagerList<AdminInfo> pagerList = new PagerList<AdminInfo>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        public JsonResult AdminInfoAdd(AdminInfo model)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                if (AdminInfoDBOperate.CheckUserName(model.UserName))
                {
                    info.Message = "用户名已存在";
                    return Json(info);
                }
                model.PassWord = CommonMethod.PasswordMD5(model.PassWord);
                flag = AdminInfoDBOperate.AddAdminInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = AdminInfoDBOperate.ModifyAdminInfo(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult AdminInfoGetOne(int id)
        {
            ResultInfo<AdminInfo> result = new ResultInfo<AdminInfo>();
            result.Data = AdminInfoDBOperate.GetModelById(id);
            return Json(result);
        }
        #endregion

        #region 财务类别配置管理
        
        public ActionResult FinanceConfigInfo()
        {
            return View();
        }
        public JsonResult FinanceConfigList()
        {
            var list = FinanceConfigDBOperate.GetListChild("Report", CookieOperate.MemberCookie.CompanyId);
            return Json(list);
        }
        public JsonResult FinanceConfigTreeList()
        {
            var AllList = FinanceConfigDBOperate.GetList("Report", CookieOperate.MemberCookie.CompanyId);
            var ConventList = AllList.ConvertAll(a => new ZTreeModel()
            {
                id = a.Id,
                name = a.Value,
                pId = a.PId,
            });
            return Json(ConventList);
        }
        public JsonResult FinanceConfigAdd(FinanceConfig model)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            model.CompanyId = CookieOperate.MemberCookie.CompanyId;
            if (model.Id <= 0)
            {
                flag = FinanceConfigDBOperate.AddConfig(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = FinanceConfigDBOperate.ModifyConfig(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult FinanceConfigGetOne(int id)
        {
            ResultInfo<FinanceConfig> result = new ResultInfo<FinanceConfig>() { IsSuccess = true };
            result.Data = FinanceConfigDBOperate.GetModelById(id);
            return Json(result);
        }

        public JsonResult FinancePermissionSet(int DepartId, string Ids) 
        {
            ResultInfo result = new ResultInfo();
            result.IsSuccess = FinanceConfigPermissionDBOperate.Set(DepartId, Ids);
            if (result.IsSuccess) { result.Message = "设置成功"; }
            return Json(result);
        }
        public JsonResult FinancePermissionGet(int DepartId)
        {
            ResultInfo<List<int>> result = new ResultInfo<List<int>>() { IsSuccess = true };
            var list =  FinanceConfigPermissionDBOperate.GetList(DepartId);
            result.Data = list.Select(a => a.FinanceConfigId).ToList();
            result.IsSuccess = true;
            return Json(result);
        }
        
        
        #endregion

        #region 财务管理
        public ActionResult FinanceReportInfo()
        {
            var list = FinanceConfigDBOperate.GetList("Report", CookieOperate.MemberCookie.CompanyId);
            ViewBag.TypeList = list.Select(a => new SelectListItem() { Value = a.Id.ToString(), Text = a.Id + ":" + a.Value });
            return View();
        }
        public JsonResult FinanceReportList(QueryBase model)
        {
            var totalcount = 0;
            model.CompanyId = CookieOperate.MemberCookie.CompanyId;
            var list = FinanceReportDBOperate.GetPagerList(model, out totalcount);
            PagerList<FinanceReport> pagerList = new PagerList<FinanceReport>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        public JsonResult FinanceReportAdd(FinanceReport model)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            var admin = CookieOperate.MemberCookie;
            model.CreateBy = admin.UserName;
            if (model.Id <= 0)
            {
                flag = FinanceReportDBOperate.AddFinanceReport(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = FinanceReportDBOperate.ModifyFinanceReport(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult FinanceReportGetOne(int id)
        {
            ResultInfo<FinanceReport> result = new ResultInfo<FinanceReport>();
            result.Data = FinanceReportDBOperate.GetModelById(id);
            return Json(result);
        }
        /// <summary>
        /// 导入
        /// </summary>
        /// <returns></returns>
        public JsonResult ImportFinanceReport() 
        {
            ResultInfo info = new ResultInfo();
            HttpPostedFileBase file = Request.Files["upfile"];
            var admin = CookieOperate.MemberCookie;
            if (file.FileName.Contains(".xls") || file.FileName.Contains(".xlsx"))
            {
                try
                {
                    DataTable dt = ExportHelper.ExcelToDataTable(file.InputStream, file.FileName, "", true);
                    if (FinanceReportBLL.ImportExcel(dt, admin))
                    {
                        info.Message = "导入成功";
                        info.IsSuccess = true;
                    }
                }
                catch (Exception ex)
                {
                    info.Message = ex.Message;
                }
            }
            return Json(info, "text/html");
        }

        public JsonResult FinanceReportData(QueryBase model) 
        {
            ResultInfo info = new ResultInfo() { Message = "",IsSuccess = true };
            info.Message = FinanceReportDBOperate.GetReportData(model);
            return Json(info);
        }
        public JsonResult FinanceReportDel(int Id)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            FinanceReport model = new FinanceReport() { Id = Id, Operater = CookieOperate.MemberCookie.UserName };
            flag = FinanceReportDBOperate.DeleteFinanceReport(model);
            info.IsSuccess = flag;
            if (flag) { info.Message = "删除成功"; }
            return Json(info);
        }
        public ActionResult FinanceReportExport(QueryBase model) 
        {
            ResultInfo info = new ResultInfo();

            string fileName = "财务报表";
            if (model.StartTime != DateTime.MinValue) { fileName += "_" + model.StartTime.ToString("yyyy-MM-dd"); }
            if (model.EndTime != DateTime.MinValue) { fileName += "_" + model.EndTime.ToString("yyyy-MM-dd"); }
            var list = FinanceReportBLL.GetExportList(model);
            Company.Util.ExportHelper.Export<ExportFinanceModel>(list, this.Response, fileName);

            return View();

        }
        #endregion

        #region 部门管理
        public ActionResult CompanyDepartMentInfo()
        {
            var list = CompanyDepartMentDBOperate.GetList(CookieOperate.MemberCookie.CompanyId);
            ViewBag.DepartMent = list.Where(a => a.PId == 0).Select(a => new SelectListItem() { Value = a.Id.ToString(), Text = a.Id + ":" + a.Name });
            var UserList = CompanyUserDBOperate.GetComapnyList(CookieOperate.MemberCookie.CompanyId);
            ViewBag.CompanyUserList = UserList.Select(a => new SelectListItem() { Value = a.Id.ToString(), Text = a.DepartName + ":" + a.Name });
            return View();
        }
        public JsonResult CompanyDepartMentList()
        {
            var list = CompanyDepartMentDBOperate.GetList(CookieOperate.MemberCookie.CompanyId);
            var plist = list.Where(a => a.PId == 0).ToList();
            foreach (var item in plist)
            {
                item.ChildList = list.Where(a => a.PId == item.Id).ToList();
            }
            PagerList<CompanyDepartMent> pagerList = new PagerList<CompanyDepartMent>();
            pagerList.rows = plist;
            return Json(pagerList);
            //int pagesize = CommonMethod.GetInt(Request["limit"]);
            //int offset = CommonMethod.GetInt(Request["offset"]);
            //string name = CommonMethod.GetString(Request["name"]);
            //var totalcount = 0;
            //var list = CompanyDepartMentDBOperate.GetPagerList(pagesize, offset, name,CookieOperate.MemberCookie.CompanyId, out totalcount);
            //var plist = CompanyDepartMentDBOperate.GetList(0, CookieOperate.MemberCookie.CompanyId);
            //list.ForEach(a => {
            //    var pName = plist.FirstOrDefault(b => b.Id == a.PId);
            //    a.PName = pName != null ? pName.Name : "顶级";
            //});
            //PagerList<CompanyDepartMent> pagerList = new PagerList<CompanyDepartMent>();
            //pagerList.rows = list;
            //pagerList.total = totalcount;
            //return Json(pagerList);
        }
        public JsonResult CompanyDepartMentAdd(CompanyDepartMent model)
        {
            model.CompanyId = CookieOperate.MemberCookie.CompanyId;
            model.CompanyName = CookieOperate.MemberCookie.CompanyName;
            ResultInfo info = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                flag = CompanyDepartMentDBOperate.AddCompanyDepartMent(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = CompanyDepartMentDBOperate.ModifyCompanyDepartMent(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult CompanyDepartMentGetOne(int id)
        {
            ResultInfo<CompanyDepartMent> result = new ResultInfo<CompanyDepartMent>();
            result.Data = CompanyDepartMentDBOperate.GetModelById(id);
            return Json(result);
        }
        #endregion

        #region 公司人员管理
        public ActionResult CompanyUserInfo()
        {
            var list = CompanyDepartMentDBOperate.GetListChild(CookieOperate.MemberCookie.CompanyId);
            ViewBag.DepartMent = list.Select(a => new SelectListItem() { Value = a.Id.ToString(), Text = a.Id + ":" + a.Name });
             return View();
        }
        public JsonResult CompanyUserList()
        {
            int pagesize = CommonMethod.GetInt(Request["limit"]);
            int offset = CommonMethod.GetInt(Request["offset"]);
            string name = CommonMethod.GetString(Request["name"]);
            var totalcount = 0;
            var list = CompanyUserDBOperate.GetPagerList(pagesize, offset, name,CookieOperate.MemberCookie.CompanyId, out totalcount);
            var dList = CompanyDepartMentDBOperate.GetListChild(CookieOperate.MemberCookie.CompanyId);
            list.ForEach(a =>
            {
                var pName = dList.FirstOrDefault(b => b.Id == a.DepartId);
                a.DepartName = pName != null ? pName.Name : "";
            });
            PagerList<CompanyUser> pagerList = new PagerList<CompanyUser>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        public JsonResult CompanyUserAdd(CompanyUser model)
        {
            var user = CookieOperate.MemberCookie;
            ResultInfo info = new ResultInfo();
            var flag = false;
            model.CompanyId = user.CompanyId;
            model.CompanyName = user.CompanyName;
            model.Ip = CommonMethod.GetClientIP;
            if (model.Id <= 0)
            {
                if (CompanyUserDBOperate.CheckUserName(model.UserName))
                {
                    info.Message = "登录名已存在";
                    return Json(info);
                }
                model.Password = CommonMethod.PasswordMD5(model.Password);
                model.CreateBy = user.UserName;
                model.CreateDate = DateTime.Now;
                flag = CompanyUserDBOperate.AddCompanyUser(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                var newModel = CompanyUserDBOperate.GetModelById(model.Id);
                if (!string.IsNullOrEmpty(model.Name))
                    newModel.Name = model.Name;
                if (!string.IsNullOrEmpty(model.WeChatHeadUrl))
                    newModel.WeChatHeadUrl = model.WeChatHeadUrl;
                if (!string.IsNullOrEmpty(model.Password)) {
                    if (newModel.Password != CommonMethod.PasswordMD5(model.Password)) {
                        info.Message = "旧密码错误";
                        return Json(info);
                    }
                    newModel.Password = CommonMethod.PasswordMD5(model.ModifyBy);
                }
                if (model.DepartId!=0)
                    newModel.DepartId = model.DepartId;
                if (!string.IsNullOrEmpty(model.Mobile))
                    newModel.Mobile = model.Mobile;
                if (!string.IsNullOrEmpty(model.Email))
                    newModel.Email = model.Email;

                newModel.ModifyBy = user.UserName;
                newModel.ModifyDate = DateTime.Now;
                flag = CompanyUserDBOperate.ModifyCompanyUser(newModel);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        public JsonResult CompanyUserGetOne(int id)
        {
            ResultInfo<CompanyUser> result = new ResultInfo<CompanyUser>();
            result.Data = CompanyUserDBOperate.GetModelById(id);
            return Json(result);
        }
        public JsonResult CompanyUserStatus(int id, int isDelete)
        {
            var user = CookieOperate.MemberCookie;
            ResultInfo info = new ResultInfo();
             var flag = CompanyUserDBOperate.ModifyStatus(id, isDelete, user.UserName);
            if (flag) { info.Message = "保存成功"; }
            return Json(info);
        }
        #endregion

        #region 审核步骤管理
        
        //设置权限
        public JsonResult AuditStepAdd(string Content, int DepartMent)
        {
            ResultInfo result = new ResultInfo();
            result.IsSuccess = AuditStepDBOperate.AuditStepAdd(Content, DepartMent, CookieOperate.MemberCookie.CompanyId,
                CookieOperate.MemberCookie.CompanyName);
            if (result.IsSuccess) { result.Message = "设置成功"; }
            return Json(result);        
        }
        public JsonResult AuditStepGet(int DepartMent) 
        {
            ResultInfo<List<AuditStep>> result = new ResultInfo<List<AuditStep>>();
            result.IsSuccess = true;
            result.Data = AuditStepDBOperate.GetAuditStepByDepartId(DepartMent);
            if (result.Data.Count == 0) { result.IsSuccess = false; }
            return Json(result);  
        }
        #endregion

        #region 项目管理 
        //主页
        public ActionResult ProjectManageInfo()
        {
            ViewBag.PayWay = CommonMethod.GetEnumItems<ProjectPayWayEnum>().Select(a => new SelectListItem() { Value = a.Key, Text = a.Value}); 
            ViewBag.Status = CommonMethod.GetEnumItems<ProjectStatusEnum>().Select(a => new SelectListItem() { Value = a.Key, Text = a.Value }); 
            return View();
        }
        //主页请求的数据
        public JsonResult ProjectManageList()
        {
            int pagesize = CommonMethod.GetInt(Request["limit"]);
            int offset = CommonMethod.GetInt(Request["offset"]);
            string name = CommonMethod.GetString(Request["name"]);
            var totalcount = 0;
            var list = ProjectManageDBOperate.GetPagerList(pagesize, offset, name, out totalcount);
            PagerList<ProjectManage> pagerList = new PagerList<ProjectManage>();
            pagerList.rows = list;
            pagerList.total = totalcount;
            return Json(pagerList);
        }
        //编辑和增加页面
        public ActionResult EditOrAdd()
        {
            return View();
        }
        //编辑和新增请求的数据
        public JsonResult ProjectManageAdd(ProjectManage model)
        {
            ResultInfo info = new ResultInfo();
            var flag = false;
            if (model.Id <= 0)
            {
                flag = ProjectManageDBOperate.AddProjectManage(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            else
            {
                flag = ProjectManageDBOperate.ModifyProjectManage(model);
                info.IsSuccess = flag;
                if (flag) { info.Message = "保存成功"; }
            }
            return Json(info);
        }
        //获取单个对象的数据
        public JsonResult ProjectManageGetOne(int id)
        {
            ResultInfo<ProjectManage> result = new ResultInfo<ProjectManage>();
            result.Data = ProjectManageDBOperate.GetModelById(id);
            return Json(result);
        }
        
        #endregion

    }
}